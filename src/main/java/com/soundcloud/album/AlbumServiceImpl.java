package com.soundcloud.album;

import com.soundcloud.artist.Artist;
import com.soundcloud.artist.ArtistService;
import com.soundcloud.bean.Bean;
import com.soundcloud.dao.DaoException;
import com.soundcloud.dao.TransactionSupport;
import com.soundcloud.dao.Transactional;
import com.soundcloud.service.ServiceException;
import com.soundcloud.track.Track;
import com.soundcloud.track.TrackService;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.util.List;
import java.util.Optional;
import java.util.Set;

import static com.soundcloud.application.ApplicationConstants.SERVICE_EXCEPTION;
import static com.soundcloud.application.ApplicationConstants.SERVICE_FATAL_EXCEPTION;


/**
 * Class, that implements AlbumService and execute business login that relate to album
 */
@TransactionSupport
@Bean(beanName = "albumServiceImpl")
public class AlbumServiceImpl implements AlbumService {
    private final AlbumDao albumDao;
    private final TrackService trackService;
    private final ArtistService artistService;

    private static final Logger LOGGER = LogManager.getLogger(AlbumServiceImpl.class);

    public AlbumServiceImpl(AlbumDao albumDao, TrackService trackService, ArtistService artistService) {
        this.albumDao = albumDao;
        this.trackService = trackService;
        this.artistService = artistService;
    }

    /**
     * method upload album
     *
     * @param album  album object
     * @param tracks album tracks
     * @param userId id of the user, who upload this album
     * @return album id,which has been generated by database
     * @throws ServiceException if we get exception from dao
     */
    @Override
    @Transactional
    public Long uploadAlbum(Album album, List<Track> tracks, Long userId) throws ServiceException {
        try {
            Long artistId = artistService.getArtistIdByUserId(userId);
            album.setArtistId(artistId);
            Long albumId = albumDao.save(album);
            for (Track track : tracks) {
                track.setAlbumId(albumId);
                if (trackService.saveTrack(track) <= 0) {
                    throw new ServiceException(SERVICE_EXCEPTION);
                }
            }
            return albumId;
        } catch (DaoException e) {
            LOGGER.error(SERVICE_EXCEPTION.replace("0", e.getMessage()));
            throw new ServiceException(SERVICE_EXCEPTION.replace("0", e.getMessage()), e);
        } catch (Exception e) {
            LOGGER.error(SERVICE_FATAL_EXCEPTION.replace("0", e.getMessage()));
            throw new ServiceException(SERVICE_FATAL_EXCEPTION.replace("0", e.getMessage()), e);
        }
    }

    /**
     * method save edition of album information
     *
     * @param albumId album id
     * @param album   album object
     * @param tracks  album tracks
     * @return if album has been successfully update -true, else false
     * @throws ServiceException if we get exception from dao
     */
    @Override
    @Transactional
    public boolean editAlbum(Long albumId, Album album, List<Track> tracks) throws ServiceException {
        try {
            for (Track track : tracks) {
                trackService.updateTrack(track);
            }
            return albumDao.update(albumId, album);
        } catch (DaoException e) {
            LOGGER.error(SERVICE_EXCEPTION.replace("0", e.getMessage()));
            throw new ServiceException(SERVICE_EXCEPTION.replace("0", e.getMessage()), e);
        } catch (Exception e) {
            LOGGER.error(SERVICE_FATAL_EXCEPTION.replace("0", e.getMessage()));
            throw new ServiceException(SERVICE_FATAL_EXCEPTION.replace("0", e.getMessage()), e);
        }
    }

    /**
     * method delete album
     *
     * @param albumId album id
     * @return if album has been deleted - true, else false
     * @throws ServiceException if we get exception from dao
     */
    @Override
    public boolean deleteAlbum(Long albumId) throws ServiceException {
        try {
            return albumDao.delete(albumId);
        } catch (DaoException e) {
            LOGGER.error(SERVICE_EXCEPTION.replace("0", e.getMessage()));
            throw new ServiceException(SERVICE_EXCEPTION.replace("0", e.getMessage()), e);
        } catch (Exception e) {
            LOGGER.error(SERVICE_FATAL_EXCEPTION.replace("0", e.getMessage()));
            throw new ServiceException(SERVICE_FATAL_EXCEPTION.replace("0", e.getMessage()), e);
        }
    }

    /**
     * method save liked albums
     * @param albumId album id
     * @param userId user id
     * @param likesAmount amount of album likes
     * @return if album has been deleted - true, else false
     * @throws ServiceException if we get exception from dao
     */
    @Override
    @Transactional
    public boolean saveLikedAlbum(Long albumId, Long userId, Integer likesAmount) throws ServiceException {
        try {
            albumDao.updateLikesAmount(albumId, ++likesAmount);
            return albumDao.saveLikedAlbum(albumId, userId);
        } catch (DaoException e) {
            LOGGER.error(SERVICE_EXCEPTION.replace("0", e.getMessage()));
            throw new ServiceException(SERVICE_EXCEPTION.replace("0", e.getMessage()), e);
        } catch (Exception e) {
            LOGGER.error(SERVICE_FATAL_EXCEPTION.replace("0", e.getMessage()));
            throw new ServiceException(SERVICE_FATAL_EXCEPTION.replace("0", e.getMessage()), e);
        }
    }
    /**
     * method delete liked albums
     * @param albumId album id
     * @param userId user id
     * @param likesAmount amount of album likes
     * @return if album has been deleted - true, else false
     * @throws ServiceException if we get exception from dao
     */
    @Override
    public boolean deleteLikedAlbum(Long albumId, Long userId, Integer likesAmount) throws ServiceException {
        try {
            albumDao.updateLikesAmount(albumId, --likesAmount);
            return albumDao.deleteLikedAlbum(albumId, userId);
        } catch (DaoException e) {
            LOGGER.error(SERVICE_EXCEPTION.replace("0", e.getMessage()));
            throw new ServiceException(SERVICE_EXCEPTION.replace("0", e.getMessage()), e);
        } catch (Exception e) {
            LOGGER.error(SERVICE_FATAL_EXCEPTION.replace("0", e.getMessage()));
            throw new ServiceException(SERVICE_FATAL_EXCEPTION.replace("0", e.getMessage()), e);
        }
    }

    /**
     * method get albums by artist id
     * @param artistId artist id
     * @return albums list if artist has albums, else empty list
     * @throws ServiceException if we get exception from dao
     */
    @Override
    public List<Album> getArtistAlbums(Long artistId) throws ServiceException {
        try {
            List<Album> albums = albumDao.getArtistAlbum(artistId);
            for (Album album :
                    albums) {
                Set<Track> albumTracks = trackService.getAlbumTracks(album.getId());
                album.setTrackList(albumTracks);
            }
            return albums;
        } catch (DaoException e) {
            LOGGER.error(SERVICE_EXCEPTION.replace("0", e.getMessage()));
            throw new ServiceException(SERVICE_EXCEPTION.replace("0", e.getMessage()), e);
        } catch (Exception e) {
            LOGGER.error(SERVICE_FATAL_EXCEPTION.replace("0", e.getMessage()));
            throw new ServiceException(SERVICE_FATAL_EXCEPTION.replace("0", e.getMessage()), e);
        }
    }

    /**
     * method return user liked albums
     * @param userId user id
     * @return if user has liked albums return list of albums, else empty list
     * @throws ServiceException if we get exception from dao
     */
    @Override
    public List<Album> getLikedAlbums(Long userId) throws ServiceException {
        try {
            List<Album> likedAlbums = albumDao.getLikedAlbums(userId);
            for (Album album :
                    likedAlbums) {
                Set<Track> albumTracks = trackService.getAlbumTracks(album.getId());
                album.setTrackList(albumTracks);
            }
            return likedAlbums;
        } catch (DaoException e) {
            LOGGER.error(SERVICE_EXCEPTION.replace("0", e.getMessage()));
            throw new ServiceException(SERVICE_EXCEPTION.replace("0", e.getMessage()), e);
        } catch (Exception e) {
            LOGGER.error(SERVICE_FATAL_EXCEPTION.replace("0", e.getMessage()));
            throw new ServiceException(SERVICE_FATAL_EXCEPTION.replace("0", e.getMessage()), e);
        }
    }

    /**
     * method return album by album name
     * @param albumName album name
     * @return if user has liked albums return list of albums, else empty list
     * @throws ServiceException if we get exception from dao
     */
    @Override
    public List<Album> getAlbumByName(String albumName) throws ServiceException {
        try {
            List<Album> albums = albumDao.getAlbumByName(albumName);
            for (Album album : albums) {
                album.setTrackList(trackService.getAlbumTracks(album.getId()));
            }
            return albums;
        } catch (DaoException e) {
            LOGGER.error(SERVICE_EXCEPTION.replace("0", e.getMessage()));
            throw new ServiceException(SERVICE_EXCEPTION.replace("0", e.getMessage()), e);
        } catch (Exception e) {
            LOGGER.error(SERVICE_FATAL_EXCEPTION.replace("0", e.getMessage()));
            throw new ServiceException(SERVICE_FATAL_EXCEPTION.replace("0", e.getMessage()), e);
        }
    }

    /**
     * method return album by album name
     * @param albumName album name
     * @return if user has liked albums return list of albums, else empty list
     * @throws ServiceException if we get exception from dao
     */
    @Override
    public List<Album> findAlbumByName(String albumName) throws ServiceException {
        try {
            List<Album> albums = albumDao.findAlbumByName(albumName);
            for (Album album : albums) {
                album.setTrackList(trackService.getAlbumTracks(album.getId()));
            }
            return albums;
        } catch (DaoException e) {
            LOGGER.error(SERVICE_EXCEPTION.replace("0", e.getMessage()));
            throw new ServiceException(SERVICE_EXCEPTION.replace("0", e.getMessage()), e);
        } catch (Exception e) {
            LOGGER.error(SERVICE_FATAL_EXCEPTION.replace("0", e.getMessage()));
            throw new ServiceException(SERVICE_FATAL_EXCEPTION.replace("0", e.getMessage()), e);
        }
    }

    /**
     * method return artist by artist id
     * @param artistId artist id
     * @return artist object
     * @throws ServiceException if we get exception from dao
     */
    @Override
    public Artist getArtistByAlbum(Long artistId) throws ServiceException {
        return artistService.getUserByArtistId(artistId);

    }

    /**
     * method return album by album id
     * @param albumId album id
     * @return album object
     * @throws ServiceException if we get exception from dao
     */
    @Override
    public Album getAlbumById(Long albumId) throws ServiceException {
        try {
            Optional<Album> albumOptional = albumDao.getById(albumId);
            if (albumOptional.isPresent()) {
                Set<Track> albumTracks = trackService.getAlbumTracks(albumOptional.get().getId());
                albumOptional.get().setTrackList(albumTracks);
                return albumOptional.get();
            } else {
                throw new ServiceException(SERVICE_EXCEPTION.replace("0", ""));
            }
        } catch (DaoException e) {
            LOGGER.error(SERVICE_EXCEPTION.replace("0", e.getMessage()));
            throw new ServiceException(SERVICE_EXCEPTION.replace("0", e.getMessage()), e);
        } catch (Exception e) {
            LOGGER.error(SERVICE_FATAL_EXCEPTION.replace("0", e.getMessage()));
            throw new ServiceException(SERVICE_FATAL_EXCEPTION.replace("0", e.getMessage()), e);
        }

    }

    /**
     * method check if album is liked
     * @param userId user id
     * @param albumId album id
     * @return if album is liked return true, else false
     * @throws ServiceException if we get exception from dao
     */
    @Override
    public boolean isLiked(Long userId, Long albumId) throws ServiceException {
        try {
            return albumDao.isLiked(userId, albumId);
        } catch (DaoException e) {
            LOGGER.error(SERVICE_EXCEPTION.replace("0", e.getMessage()));
            throw new ServiceException(SERVICE_EXCEPTION.replace("0", e.getMessage()), e);
        } catch (Exception e) {
            LOGGER.error(SERVICE_FATAL_EXCEPTION.replace("0", e.getMessage()));
            throw new ServiceException(SERVICE_FATAL_EXCEPTION.replace("0", e.getMessage()), e);
        }
    }

    /**
     * method return the name of album artist
     * @param albumId album id
     * @return artist name
     * @throws ServiceException if we get exception from dao
     */
    @Override
    public String getArtistAlbumName(Long albumId) throws ServiceException {
        try {
            Optional<Album> album = albumDao.getById(albumId);
            if (album.isPresent()) {
                Long artistId = album.get().getArtistId();
                return artistService.getArtistName(artistId);
            }
            throw new ServiceException(SERVICE_EXCEPTION.replace("0", ""));
        } catch (DaoException e) {
            LOGGER.error(SERVICE_EXCEPTION.replace("0", e.getMessage()));
            throw new ServiceException(SERVICE_EXCEPTION.replace("0", e.getMessage()), e);
        } catch (Exception e) {
            LOGGER.error(SERVICE_FATAL_EXCEPTION.replace("0", e.getMessage()));
            throw new ServiceException(SERVICE_FATAL_EXCEPTION.replace("0", e.getMessage()), e);
        }
    }

    /**
     * method return the list of all albums
     * @return all albums in database album table
     * @throws ServiceException if we get exception from dao
     */
    @Override
    public List<Album> getAll() throws ServiceException {
        try {
            return albumDao.getAll();
        } catch (DaoException e) {
            LOGGER.error(SERVICE_EXCEPTION.replace("0", e.getMessage()));
            throw new ServiceException(SERVICE_EXCEPTION.replace("0", e.getMessage()), e);
        } catch (Exception e) {
            LOGGER.error(SERVICE_FATAL_EXCEPTION.replace("0", e.getMessage()));
            throw new ServiceException(SERVICE_FATAL_EXCEPTION.replace("0", e.getMessage()), e);
        }
    }

    /**
     * method update album information without album icon
     * @param albumId album id
     * @param album album object
     * @return if album was updated return true, else false
     * @throws ServiceException if we get exception from dao
     */
    @Override
    public boolean updateAlbum(Long albumId, Album album) throws ServiceException {
        try {
            return albumDao.update(albumId, album);
        } catch (DaoException e) {
            LOGGER.error(SERVICE_EXCEPTION.replace("0", e.getMessage()));
            throw new ServiceException(SERVICE_EXCEPTION.replace("0", e.getMessage()), e);
        } catch (Exception e) {
            LOGGER.error(SERVICE_FATAL_EXCEPTION.replace("0", e.getMessage()));
            throw new ServiceException(SERVICE_FATAL_EXCEPTION.replace("0", e.getMessage()), e);
        }
    }
    /**
     * method update album information with album icon
     * @param albumId album id
     * @param album album object
     * @return if album was updated return true, else false
     * @throws ServiceException if we get exception from dao
     */
    @Override
    public boolean updateAlbumWithIcon(Long albumId, Album album) throws ServiceException {
        try {
            return albumDao.updateWithIcon(albumId, album);
        } catch (DaoException e) {
            LOGGER.error(SERVICE_EXCEPTION.replace("0", e.getMessage()));
            throw new ServiceException(SERVICE_EXCEPTION.replace("0", e.getMessage()), e);
        } catch (Exception e) {
            LOGGER.error(SERVICE_FATAL_EXCEPTION.replace("0", e.getMessage()));
            throw new ServiceException(SERVICE_FATAL_EXCEPTION.replace("0", e.getMessage()), e);
        }
    }
}
