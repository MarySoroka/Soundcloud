package com.soundcloud;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class TestUtils {
    public static final String drop= "DROP SCHEMA PUBLIC CASCADE";
    public static final String createSQl =
            "CREATE SCHEMA IF NOT EXISTS soundcloud_test ;";
    public static final String createUserWallet =
                    "CREATE TABLE IF NOT EXISTS soundcloud_test.user_wallet (\n" +
                    "  wallet_id BIGINT GENERATED BY DEFAULT AS IDENTITY(INCREMENT BY 1),\n" +
                    "  amount DECIMAL(2) DEFAULT 0  NOT NULL ,\n" +
                    "  PRIMARY KEY (wallet_id));";
    public static final String createUserAccount =
            "CREATE TABLE IF NOT EXISTS soundcloud_test.user_account (\n" +
                    "  user_id BIGINT GENERATED BY DEFAULT AS IDENTITY(INCREMENT BY 1),\n" +
                    "  user_login VARCHAR(200) NOT NULL,\n" +
                    "  user_password VARCHAR(200) NOT NULL,\n" +
                    "  user_email VARCHAR(200) NOT NULL,\n" +
                    "  user_icon BLOB NOT NULL,\n" +
                    "  wallet_id BIGINT NOT NULL,\n" +
                    "  user_follows INT DEFAULT 0  NOT NULL ,\n" +
                    "  user_followers INT DEFAULT 0  NOT NULL ,\n" +
                    "  PRIMARY KEY (user_id, wallet_id));";
    public static final String createUserRole =
            "CREATE TABLE IF NOT EXISTS soundcloud_test.user_role (\n" +
                    "  role_id BIGINT GENERATED BY DEFAULT AS IDENTITY(INCREMENT BY 1),\n" +
                    "  role_name VARCHAR(50) NOT NULL,\n" +
                    "  PRIMARY KEY (role_id));";
    public static final String createAlbum =
            "CREATE TABLE IF NOT EXISTS soundcloud_test.album (\n" +
                    "  album_id BIGINT GENERATED BY DEFAULT AS IDENTITY(INCREMENT BY 1),\n" +
                    "  album_name VARCHAR(200) NOT NULL,\n" +
                    "  album_release DATE NOT NULL,\n" +
                    "  album_icon BLOB NOT NULL,\n" +
                    "  album_state VARCHAR(50)  DEFAULT 0 NOT NULL,\n" +
                    "  album_genre VARCHAR(50)  DEFAULT 0 NOT NULL,\n" +
                    "  likes_amount INT  DEFAULT 0 NOT NULL,\n" +
                    "  artist_id BIGINT  DEFAULT 0 NOT NULL,\n" +
                    "  PRIMARY KEY (album_id));" ;
    public static final String createSubscribe =
            "CREATE TABLE IF NOT EXISTS soundcloud_test.subscription (\n" +
                    "  subscription_id BIGINT GENERATED BY DEFAULT AS IDENTITY(INCREMENT BY 1),\n" +
                    "  subscription_date DATE NOT NULL,\n" +
                    "  subscription_user_id BIGINT  DEFAULT 0 NOT NULL,\n" +
                    "  subscription_status VARCHAR(50)  DEFAULT 0 NOT NULL,\n" +
                    "  PRIMARY KEY (subscription_id));" ;
    public static final String createTrack =
            "CREATE TABLE IF NOT EXISTS soundcloud_test.track (\n" +
                    "  track_id BIGINT GENERATED BY DEFAULT AS IDENTITY(INCREMENT BY 1),\n" +
                    "  track_name VARCHAR(200) NOT NULL,\n" +
                    "  plays_amount INT  DEFAULT 0 NOT NULL,\n" +
                    "  album_id BIGINT DEFAULT 0 NOT NULL,\n" +
                    "  track_path VARCHAR(200) NOT NULL,\n" +
                    "  PRIMARY KEY (track_id, album_id));" ;
    public static final String createUserRoleRelation =
            "CREATE TABLE IF NOT EXISTS soundcloud_test.user_role_has_user (\n" +
                    "  role_id BIGINT GENERATED BY DEFAULT AS IDENTITY(INCREMENT BY 1),\n" +
                    "  user_id BIGINT  DEFAULT 0 NOT NULL,\n" +
                    "  PRIMARY KEY (role_id, user_id)" +
                    ");" ;
    public static final String createUserAlbum =
            "CREATE TABLE IF NOT EXISTS soundcloud_test.liked_user_albums (\n" +
                    "  user_id BIGINT  DEFAULT 0 NOT NULL," +
                    "  album_id BIGINT  DEFAULT 0 NOT NULL," +
                    "  PRIMARY KEY (album_id));" ;
    public static final String createUserRelation=
            "CREATE TABLE IF NOT EXISTS soundcloud_test.user_follow_user (\n" +
                    "  user_id BIGINT GENERATED BY DEFAULT AS IDENTITY(INCREMENT BY 1)," +
                    "  user_follow_id BIGINT DEFAULT 0 NOT NULL ," +
                    "  PRIMARY KEY (user_follow_id));" ;
    public static final String createUserPlaylist =
            "CREATE TABLE IF NOT EXISTS soundcloud_test.user_playlist (\n" +
                    "  playlist_id BIGINT GENERATED BY DEFAULT AS IDENTITY(INCREMENT BY 1)," +
                    "  playlist_name VARCHAR(200) NOT NULL,\n" +
                    "  playlist_icon BLOB NOT NULL,\n" +
                    "  user_id BIGINT DEFAULT 0 NOT NULL,"+
                    "  PRIMARY KEY (playlist_id, user_id));" ;
    public static final String createUserPlaylistRelation =
            "CREATE TABLE IF NOT EXISTS soundcloud_test.track_has_user_playlist (\n" +
                    "  track_id BIGINT GENERATED BY DEFAULT AS IDENTITY(INCREMENT BY 1)," +
                    "  user_playlist_id BIGINT  DEFAULT 0 NOT NULL," +
                    "  PRIMARY KEY (user_playlist_id));" ;
    public static final String createArtist =
            "CREATE TABLE IF NOT EXISTS soundcloud_test.artist (\n" +
                    "  artist_id BIGINT GENERATED BY DEFAULT AS IDENTITY(INCREMENT BY 1)," +
                    "  user_id BIGINT  DEFAULT 0 NOT NULL," +
                    "  PRIMARY KEY (artist_id, user_id));";
    //language=HSQLDB
    public static final String createArtistAlbum =
            "CREATE TABLE IF NOT EXISTS soundcloud_test.artist_has_album (\n" +
                    "  artist_id BIGINT GENERATED BY DEFAULT AS IDENTITY(INCREMENT BY 1)," +
                    "  album_id BIGINT  DEFAULT 0 NOT NULL," +
                    "  PRIMARY KEY (artist_id, album_id));";
    public static final String createNotification =
            "CREATE TABLE  IF NOT EXISTS soundcloud_test.notification (\n" +
                    "  notification_id BIGINT GENERATED BY DEFAULT AS IDENTITY(INCREMENT BY 1)," +
                    "  notification_message VARCHAR(1000) NOT NULL,\n" +
                    "  user_id BIGINT  DEFAULT 0 NOT NULL," +
                    "  notification_status VARCHAR(50) NOT NULL,\n" +
                    "  PRIMARY KEY (notification_id, user_id));";
    //language=HSQLDB
    public static final String createMessage =
            "CREATE TABLE  IF NOT EXISTS soundcloud_test.message (\n" +
                    "  message_id BIGINT GENERATED BY DEFAULT AS IDENTITY(INCREMENT BY 1)," +
                    "  message VARCHAR(2000) NOT NULL,\n" +
                    "  user_sender_id BIGINT  DEFAULT 0 NOT NULL," +
                    "  user_recipient_id BIGINT  DEFAULT 0 NOT NULL," +
                    "  PRIMARY KEY (message_id, user_sender_id, user_recipient_id));";

    public static void createDB(Connection connection) throws SQLException {
        PreparedStatement createTableStatement = connection.prepareStatement(createSQl);
        createTableStatement.executeUpdate();
        createTableStatement = connection.prepareStatement(createUserAccount);
        createTableStatement.executeUpdate();
        createTableStatement = connection.prepareStatement(createAlbum);
        createTableStatement.executeUpdate();
        createTableStatement = connection.prepareStatement(createArtist);
        createTableStatement.executeUpdate();
        createTableStatement = connection.prepareStatement(createArtistAlbum);
        createTableStatement.executeUpdate();
        createTableStatement = connection.prepareStatement(createMessage);
        createTableStatement.executeUpdate();
        createTableStatement = connection.prepareStatement(createTrack);
        createTableStatement.executeUpdate();
        createTableStatement = connection.prepareStatement(createNotification);
        createTableStatement.executeUpdate();
        createTableStatement = connection.prepareStatement(createUserAlbum);
        createTableStatement.executeUpdate();
        createTableStatement = connection.prepareStatement(createUserWallet);
        createTableStatement.executeUpdate();
        createTableStatement = connection.prepareStatement(createUserPlaylist);
        createTableStatement.executeUpdate();
        createTableStatement = connection.prepareStatement(createUserPlaylistRelation);
        createTableStatement.executeUpdate();
        createTableStatement = connection.prepareStatement(createUserRole);
        createTableStatement.executeUpdate();
        createTableStatement = connection.prepareStatement(createUserRoleRelation);
        createTableStatement.executeUpdate();
        createTableStatement = connection.prepareStatement(createUserRelation);
        createTableStatement.executeUpdate();
        createTableStatement = connection.prepareStatement(createSubscribe);
        createTableStatement.executeUpdate();

    }

    public static void dropDB(Connection connection) throws SQLException {
        PreparedStatement createTableStatement = connection.prepareStatement(drop);
        createTableStatement.executeUpdate();
    }

}
